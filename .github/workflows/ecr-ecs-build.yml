name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  ENVIRONMENT: production
  AWS_REGION: us-east-1  # Using the region from your docker-compose
  FRONTEND_ECR_REPOSITORY: typo-hunt-frontend
  BACKEND_ECR_REPOSITORY: typo-hunt-backend
  ECS_SERVICE: arn:aws:ecs:us-east-1:392621639137:service/typo-hunt-clustre/typo-hunt-service
  ECS_CLUSTER: arn:aws:ecs:us-east-1:392621639137:cluster/typo-hunt-clustre
  ECS_TASK_DEFINITION: arn:aws:ecs:us-east-1:392621639137:task-definition/typo-hunt:2
  FRONTEND_CONTAINER_NAME: frontend
  BACKEND_CONTAINER_NAME: backend

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push frontend image to Amazon ECR
      id: build-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        if [[ "$ENVIRONMENT" == "production" ]]; then
          DOCKERFILE="Dockerfile.prod"
          IMAGE_TAG="prod-$IMAGE_TAG"
        else
          DOCKERFILE="Dockerfile.dev"
          IMAGE_TAG="dev-$IMAGE_TAG"
        fi

        docker build -t $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG -f ./frontend/$DOCKERFILE ./frontend
        docker push $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG
        echo "frontend-image=$ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build, tag, and push backend image to Amazon ECR
      id: build-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        if [[ "$ENVIRONMENT" == "production" ]]; then
          DOCKERFILE="Dockerfile.prod"
          IMAGE_TAG="prod-$IMAGE_TAG"
        else
          DOCKERFILE="Dockerfile.dev"
          IMAGE_TAG="dev-$IMAGE_TAG"
        fi

        docker build -t $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG -f ./backend/$DOCKERFILE ./backend
        docker push $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG
        echo "backend-image=$ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
        --query taskDefinition > task-definition.json

    - name: Fill in the new image IDs in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.FRONTEND_CONTAINER_NAME }}
        image: ${{ steps.build-frontend.outputs.frontend-image }}

    - name: Update backend container in task definition
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        container-name: ${{ env.BACKEND_CONTAINER_NAME }}
        image: ${{ steps.build-backend.outputs.backend-image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
